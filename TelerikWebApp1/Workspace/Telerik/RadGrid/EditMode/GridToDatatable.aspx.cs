using System;
using System.Linq;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

using System.Data;
using System.Configuration;
using System.Web.Security;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Telerik.Web.UI;
using DataAccessLayer;
using BusinessEntities;

public partial class GridToDatatable : System.Web.UI.Page 
{
    // GridDataItem <=> Row

    protected void Page_Load(object sender, EventArgs e)
    {
        
    }

    protected void NeedDataSource_Handler(object sender, GridNeedDataSourceEventArgs e)
    {
        EmployeeDataContract edc;
        edc = GetAppropriateDataObject();
        ((RadGrid)sender).DataSource = edc.Employees;
    }

    /// <summary>
    /// If the data is not available in the session variable, 
    ///             Fetch the data from the WCF Service and return it.
    /// else,
    ///             Return the data from the session variable.
    /// </summary>
    /// <returns></returns>
    private EmployeeDataContract GetAppropriateDataObject()
    {
        EmployeeDataContract edc;
        if (Session["data"] == null)
        {
            DataAccessService das = new DataAccessService();
            edc = das.GetEmployeeData(1);
            Session["data"] = edc;
        }
        else
            edc = Session["data"] as EmployeeDataContract;
        return edc;
    }


    /// <summary>
    /// Read the data displayed in the RadGrid1 and convert it into DataTable.
    /// Then, bind the DataTable to the RadGrid2.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void ExtractToDatatable_Click(object sender, EventArgs e)
    {
        DataTable dt;
        MsgLabel.InnerText = "";

        dt = GridToDataTable();

        RadGrid2.DataSource = dt;
        RadGrid2.DataBind();
    }

    private DataTable GridToDataTable()
    {
        DataTable dt = new DataTable();
        int columncount = 0;

        foreach (GridColumn column in RadGrid1.Columns)// in RadGrid1.MasterTableView.AutoGeneratedColumns)
        {
            if (!string.IsNullOrEmpty(column.UniqueName) && !string.IsNullOrEmpty(column.HeaderText))
            {
                columncount++;
                if (column.HeaderText == "Id")
                    dt.Columns.Add(column.UniqueName, typeof(int));
                else if (column.HeaderText == "Salary")
                    dt.Columns.Add(column.UniqueName, typeof(double));
                else
                    dt.Columns.Add(column.UniqueName, typeof(string));
            }
        }

        DataRow dr;
        foreach (GridDataItem item in RadGrid1.Items)// in RadGrid1.MasterTableView.Items)
        {
            dr = dt.NewRow();

            for (int i = 0; i < columncount; i++)
            {
                //dr[i] = item[RadGrid1.MasterTableView.AutoGeneratedColumns[i].UniqueName].Text;
                //item["NameUnique"].FindControl("NameLabel").Text;
                string UniqueName = RadGrid1.Columns[i].UniqueName;
                try
                {

                    switch (UniqueName)
                    {
                        case "IdUnique":
                            dr[i] = int.Parse((item["IdUnique"].FindControl("IdLabel") as Label).Text.Trim());
                            break;
                        case "NameUnique":
                            dr[i] = (item["NameUnique"].FindControl("NameLabel") as Label).Text;
                            break;
                        case "JobUnique":
                            dr[i] = (item["JobUnique"].FindControl("JobLabel") as Label).Text;
                            break;
                        case "SalaryUnique":
                            dr[i] = double.Parse((item["SalaryUnique"].
                                        FindControl("SalaryLabel") as Label).Text.Trim());
                            break;
                        case "ManagerNameUnique":
                            dr[i] = (item["ManagerNameUnique"].FindControl("ManagerLabel") as Label).Text;
                            break;
                    }
                }
                catch (Exception)
                {
                    MsgLabel.InnerText = "Please ensure that there is not editable field in the above table";
                }
            }

            dt.Rows.Add(dr);
        }

        return dt;
    }


    /// <summary>
    /// When edit button is clicked, the RadComboBoc of the selected row is intitalised.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void RadGrid1_ItemDataBound(object sender, GridItemEventArgs e)
    {
        // Bind AutoComplete values for Manager Column
        if (e.Item is GridEditableItem)
        {
            GridDataItem gdi = e.Item as GridDataItem;
            GridTableCell gdc = gdi["ManagerNameUnique"] as GridTableCell;

            RadComboBox ManagerCB = (RadComboBox)gdc.FindControl("ManagerRadComboBox");
            if (ManagerCB != null)
            {
                ManagerCB.DataSource = (from r in (Session["data"] as EmployeeDataContract).Employees
                                        select r.Name).ToList<string>();
                ManagerCB.DataBind();

                // Initialize the ComboBox with the already selected text.
                if (Session["ManagerInLabel"] != null)
                    ManagerCB.SelectedIndex = (from i in ManagerCB.Items
                                               where i.Text == Session["ManagerInLabel"].ToString()
                                               select i.Index).First<int>();
                Session["ManagerInLabel"] = null;
            }
        }
    }


    protected void RadGrid1_InsertCommand(object sender, GridCommandEventArgs e)
    {
        GridEditableItem gei = e.Item as GridEditableItem;
        string _Id = (gei["IdUnique"].FindControl("IdTextBox") as TextBox).Text;
        string _Name = (gei["NameUnique"].FindControl("NameTextBox") as TextBox).Text;
        string _Job = (gei["JobUnique"].FindControl("JobTextBox") as TextBox).Text;
        string _Salary = (gei["SalaryUnique"].FindControl("SalaryTextBox") as TextBox).Text;
        string _Manager = (gei["ManagerNameUnique"].
            FindControl("ManagerRadComboBox") as RadComboBox).SelectedValue;

        EmployeeDataContract edc = GetAppropriateDataObject();
        edc.Employees.Add(new Employee()
        {
            Id = int.Parse(_Id == "" ? "0" : _Id),
            Name = _Name ?? "",
            Job = _Job ?? "",
            Salary = double.Parse(_Salary == "" ? "0" : _Salary),
            ManagerName = _Manager ?? ""
        });

        Session["data"] = edc;
    }

    protected void RadGrid1_EditCommand(object sender, GridCommandEventArgs e)
    {
        GridEditableItem gei = e.Item as GridEditableItem;
        Session["ManagerInLabel"] = (gei["ManagerNameUnique"].FindControl("ManagerLabel2") as Label).Text;
    }

    
    protected void RadGrid1_UpdateCommand(object sender, GridCommandEventArgs e)
    {
        GridEditableItem gei = e.Item as GridEditableItem;
        string Id = (gei["IdUnique"].FindControl("IdLabel") as Label).Text;
        string Name = (gei["NameUnique"].FindControl("NameTextBox") as TextBox).Text;
        string Job = (gei["JobUnique"].FindControl("JobTextBox") as TextBox).Text;
        string Salary = (gei["SalaryUnique"].FindControl("SalaryTextBox") as TextBox).Text;
        //string Manager = (gei["ManagerNameUnique"].FindControl("ManagerTextBox") as TextBox).Text;
        string Manager = (gei["ManagerNameUnique"].
            FindControl("ManagerRadComboBox") as RadComboBox).SelectedValue;

        EmployeeDataContract edc = GetAppropriateDataObject();

        edc.Employees = (edc.Employees.Select(item =>
                                        {
                                            Employee emp = item;
                                            if (item.Id.ToString() == Id)
                                            {
                                                if (item.ManagerName != Manager) emp.ManagerName = Manager;
                                                if (item.Job != Job) emp.Job = Job;
                                                if (item.Name != Name) emp.Name = Name;
                                                if (item.Salary.ToString() != Salary)
                                                    emp.Salary = double.Parse(Salary);
                                            }
                                            return emp;
                                        })).ToList<Employee>();
        Session["data"] = edc;
    }




    protected void RadGrid1_PreRender(object sender, EventArgs e)
    {
        /*
         * Code for making all the Cells in the RadGrid, editable.
         */
        //if (!IsPostBack)
        //{
        //    for (int i = 0; i < RadGrid1.PageSize; i++)
        //    {
        //        RadGrid1.EditIndexes.Add(i);
        //        RadGrid1.MasterTableView.EditMode = GridEditMode.InPlace;
        //        RadGrid1.Rebind();
        //    }
        //}
    }

    protected void UpdateButton_Click(object sender, EventArgs e)
    {
        EmployeeDataContract edc = new EmployeeDataContract();
        edc.EmployeeDT = GridToDataTable();

        DataAccessService das = new DataAccessService();
        das.UpdateEmpBatch(edc);
    }
    

}
